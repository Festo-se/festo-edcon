# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

image: "python:3.8.13-bullseye"

stages:          # List of stages for jobs, and their order of execution
  - test
  - changelogtest
  - deploy

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  before_script:
    - python -m pip install .
    - python -m pip install pytest pytest-cov
  script:
    - pytest tests -v --cov=cmmt --cov=profidrive --cov=boollist
  only:
    - branches
    - merge_requests

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  before_script:
    - python -m pip install .
    - python -m pip install pylint
  script:
    - pylint src -d=logging-fstring-interpolation --ignore=pycmmt_tools # For now ignore
  only:
    - branches
    - merge_requests

changelog-test-job:
  stage: changelogtest
  script:
    - git fetch --all
    - if [ 0 -eq $(git diff --name-only origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}...${CI_COMMIT_SHA} CHANGELOG.md | wc -l) ]; then exit 1; fi
  only:
    - merge_requests

deploy-job:
  stage: deploy
  before_script:
    # - python -m pip install wheel
    - python -m pip install twine
  script:
    # - python setup.py bdist_wheel upload -r local
    - twine upload --repository-url https://adeartifactory1.de.festo.net/artifactory/api/pypi/electricdrives-python-dev-local -u$ARTIFACTORY_PYPI_USER -p$ARTIFACTORY_PYPI_PASSWORD dist/*
    # Here we need to upload to artifactory
  only:
    - branches