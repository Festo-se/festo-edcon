# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

image: "python:3.9-bullseye"

# Run branch pipeline only if no MR pipeline exists
workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
    - when: always

# List of stages for jobs, and their order of execution
stages:          
  - test
  - docs
  - changelog-test
  - deploy

changelog-test:
  stage: changelog-test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - git fetch --all
    - if [ 0 -eq $(git diff --name-only origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}...${CI_COMMIT_SHA} CHANGELOG.md | wc -l) ]; then exit 1; fi

unit-test:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  before_script:
    - python -m pip install .
    - python -m pip install pytest pytest-cov
  script:
    - pytest tests -v --cov=edcon

  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

pylint:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test (in parallel).
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  before_script:
    - python -m pip install .
    - python -m pip install pylint
  script:
    - pylint src

black:
  stage: test
  before_script:
    - pip install black
    - pip install .
  script:
    - black src --check

sphinx-docs:
  stage: docs
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  before_script:
    - pip install -U pip sphinx sphinx-rtd-theme myst-parser
    - pip install .
  script:
    - mkdir public
    - sphinx-apidoc -f -o docs/source src
    - make -C docs html || exit_code=$?
    - >
      if [[ $exit_code -ne 0 ]]; then
        echo "Sphinx-build failure"
        exit 1
      else
        echo "Sphinx-build success"
        mv docs/build/html/* public
      fi
  artifacts:
    paths:
      - public

deploy:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/ && $CI_COMMIT_REF_PROTECTED == "true"'
  before_script:
    - python -m pip install twine kac-tools
  script:
    - mkdir public
    - kac-tools >> public/RELEASENOTES.md
    - python -m pip wheel --no-deps .
    - twine check *.whl
    - twine upload *.whl
  artifacts:
    paths:
      - public
  needs:
    - unit-test
    - pylint

gitlab-release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/ && $CI_COMMIT_REF_PROTECTED == "true"'
  script:
    - echo "running gitlab-release"
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: './public/RELEASENOTES.md'
  needs:
    - deploy


pages:
  image: alpine:latest
  stage: deploy
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'

  script:
    - echo 'Nothing to do...'
  artifacts:
    paths:
        - public

  needs: ["sphinx-docs"]

